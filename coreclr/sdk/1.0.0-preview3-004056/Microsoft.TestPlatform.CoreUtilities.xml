<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TestPlatform.CoreUtilities</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg">
            <summary>
            Helper to validate parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.NotNull``1(``0,System.String)">
            <summary>
            Throws ArgumentNullException if the argument is null, otherwise passes it through.
            </summary>
            <typeparam name="T">
            Type to validate.
            </typeparam>
            <param name="arg">
            The argument to check.
            </param>
            <param name="parameterName">
            The parameter name of the argument.
            </param>
            <returns>
            Type of argument.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Validate a string is not null or empty.
            </summary>
            <param name="arg">
            Input string.
            </param>
            <param name="parameterName">
            Name of the parameter to validate.
            </param>
            <returns>
            Validated string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the input string is null or empty.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.NotNegative(System.Int32,System.String)">
            <summary>
            Throws ArgumentOutOfRangeException if the argument is less than zero.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="parameterName">The parameter name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.NotNegative(System.Int64,System.String)">
            <summary>
            Throws ArgumentOutOfRangeException if the argument is less than zero.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="parameterName">The parameter name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws ArgumentNullException if the string is null, ArgumentException if the string is empty.
            </summary>
            <typeparam name="T">Type of parameter to validate.</typeparam>
            <param name="arg">The argument to check.</param>
            <param name="parameterName">The parameter name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg.TypeOf``1(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException if the argument is null, ArgumentException if the argument is not the correct type.
            </summary>
            <param name="arg">The argument to check.</param>
            <param name="parameterName">The parameter name of the argument.</param>
            <typeparam name="T">The type of the expected argument.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty">
            <summary>
            Helper to validate parameter properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty.NotNull(System.Object,System.String,System.String)">
            <summary>
            Throws ArgumentException if the argument is null.
            </summary>
            <param name="arg">The argument to check (e.g. <c>Param1.PropertyA</c>).</param>
            <param name="parameterName">The parameter name of the argument.</param>
            <param name="propertyName">The property name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty.NotNegative(System.Int32,System.String,System.String)">
            <summary>
            Throws ArgumentException if the argument is less than zero.
            </summary>
            <param name="arg">The argument to check (e.g. <c>Param1.PropertyA</c>).</param>
            <param name="parameterName">The parameter name of the argument.</param>
            <param name="propertyName">The property name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws ArgumentException if the argument string is null or empty.
            </summary>
            <param name="arg">The argument to check (e.g. <c>Param1.PropertyA</c>).</param>
            <param name="parameterName">The parameter name of the argument.</param>
            <param name="propertyName">The property name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty.TypeOf``1(System.Object,System.String,System.String)">
            <summary>
            Throws ArgumentException if the argument is null or is not the correct type.
            </summary>
            <param name="arg">The argument to check (e.g. <c>Param1.PropertyA</c>).</param>
            <param name="parameterName">The parameter name of the argument.</param>
            <param name="propertyName">The property name of the argument.</param>
            <typeparam name="T">The type of the expected argument.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidatedNotNullAttribute">
            <summary>
            Secret attribute that tells the CA1062 validate arguments rule that this method validates the argument is not null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace">
            <summary>
            Wrapper class for tracing.
                - Shortcut-methods for Error, Warning, Info, Verbose.
                - Adds additional information to the trace: calling process name, PID, ThreadID, Time.
                - Uses custom switch <c>EqtTraceLevel</c> from .config file.
                - By default tracing if OFF.
                - Our build environment always sets the /d:TRACE so this class is always enabled,
                  the Debug class is enabled only in debug builds (/d:DEBUG).
                - We ignore exceptions thrown by underlying TraceSwitch (e.g. due to config file error).
                  We log ignored exceptions to system Application log.
                  We pass through exceptions thrown due to incorrect arguments to <c>EqtTrace</c> methods.
            Usage: <c>EqtTrace.Info("Here's how to trace info");</c>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ListenerName">
            <summary>
            Name of the trace listener.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Source">
            <summary>
            Use a custom trace source. This doesn't pollute the default tracing for user applications.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceSourceLevelsMap">
            <summary>
            Create static maps for TraceLevel to SourceLevels. The APIs need to provide TraceLevel
            for backward compatibility with older versions of Object Model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.SourceTraceLevelsMap">
            <summary>
            Create static maps for SourceLevels to TraceLevel. The APIs need to provide TraceLevel
            for backward compatibility with older versions of Object Model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevelEventTypeMap">
            <summary>
            Create static maps for SourceLevels to TraceLevel. The APIs need to provide TraceLevel
            for backward compatibility with older versions of Object Model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.isInitialized">
            <summary>
            Specifies whether the trace is initialized or not
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.isInitializationLock">
            <summary>
            Lock over initialization
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.LogFile">
            <summary>
            Gets the log file for tracing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.TraceLevel">
            <summary>
            Gets or sets the trace level.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.IsErrorEnabled">
            <summary>
            Gets a value indicating whether tracing error statements is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.IsInfoEnabled">
            <summary>
            Gets a value indicating whether tracing info statements is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.IsVerboseEnabled">
            <summary>
            Gets a value indicating whether tracing verbose statements is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.IsWarningEnabled">
            <summary>
            Gets a value indicating whether tracing warning statements is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InitializeVerboseTrace(System.String)">
            <summary>
            Initializes the verbose tracing with custom log file
            And overrides if any trace is set before
            </summary>
            <param name="customLogFile">A custom log file for trace messages.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.SetupListener(System.Diagnostics.TraceListener)">
            <summary>
            Setup a custom trace listener instead of default trace listener created by test platform.
            This is needed by DTA Agent where it needs to listen test platform traces but doesn't use test platform listener.
            </summary>
            <param name="listener">
            The listener.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ShouldTrace(System.Diagnostics.TraceLevel)">
            <summary>
            Gets a value indicating if tracing is enabled for a trace level.
            </summary>
            <param name="traceLevel">Trace level.</param>
            <returns>True if tracing is enabled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Fail(System.String)">
            <summary>
            Prints an error message and prompts with a Debug dialog
            </summary>
            <param name="message">the error message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Fail(System.String,System.Object[])">
            <summary>
            Combines together <c>EqtTrace.Fail</c> and Debug.Fail:
            Prints an formatted error message and prompts with a Debug dialog.
            </summary>
            <param name="format">The formatted error message</param>
            <param name="args">Arguments to the format</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Error(System.String)">
            <summary>
            Trace an error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorIf(System.Boolean,System.String)">
            <summary>
            Only prints the message if the condition is true
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace error message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorUnless(System.Boolean,System.String)">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace error message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for trace.</param>
            <param name="bumpLevel">Level for trace.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Error(System.String,System.Object[])">
            <summary>
            Trace an error message with formatting arguments.
            </summary>
            <param name="format">Format of error message.</param>
            <param name="args">Parameters for the error message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorUnless(System.Boolean,System.String,System.Object[])">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for trace.</param>
            <param name="format">Message format.</param>
            <param name="args">Trace message format arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for trace.</param>
            <param name="bumpLevel">Level for trace.</param>
            <param name="format">Message format.</param>
            <param name="args">Trace message format arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Only prints the formatted message if the condition is true
            </summary>
            <param name="condition">Condition for trace.</param>
            <param name="format">Message format.</param>
            <param name="args">Trace message format arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.ErrorAssert(System.String,System.Object[])">
            <summary>
            Error and Debug.Fail combined in one call.
            </summary>
            <param name="format">The message to send to Debug.Fail and Error.</param>
            <param name="args">Arguments to string.Format.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Error(System.Exception)">
            <summary>
            Write a exception if tracing for error is enabled
            </summary>
            <param name="exceptionToTrace">The exception to write.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Warning(System.String)">
            <summary>
            Trace a warning message.
            </summary>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningIf(System.Boolean,System.String)">
            <summary>
            Only prints the formatted message if the condition is true
            </summary>
            <param name="condition">Condition to evaluate for tracing.</param>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningUnless(System.Boolean,System.String)">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition to evaluate for tracing.</param>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition to evaluate for tracing.</param>
            <param name="bumpLevel">Trace message level.</param>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Warning(System.String,System.Object[])">
            <summary>
            Trace a warning message.
            </summary>
            <param name="format">Format of the trace message.</param>
            <param name="args">Arguments for the trace message format.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Trace a warning message based on a condition.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Format of the trace message.</param>
            <param name="args">Arguments for the trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningUnless(System.Boolean,System.String,System.Object[])">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Format of trace message.</param>
            <param name="args">Arguments for the trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WarningUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="bumpLevel">Level of trace message.</param>
            <param name="format">Format of the trace message.</param>
            <param name="args">Arguments for trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Info(System.String)">
            <summary>
            Trace an informational message.
            </summary>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoIf(System.Boolean,System.String)">
            <summary>
            Trace an informational message based on a condition.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoUnless(System.Boolean,System.String)">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="bumpLevel">Trace message level.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Info(System.String,System.Object[])">
            <summary>
            Trace an informational message based on a format.
            </summary>
            <param name="format">Trace message format.</param>
            <param name="args">Arguments for trace format.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Trace an informational message based on a condition.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Format of the trace message.</param>
            <param name="args">Arguments for the trace format.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoUnless(System.Boolean,System.String,System.Object[])">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Trace message format.</param>
            <param name="args">Trace message format arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.InfoUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="bumpLevel">Trace message level.</param>
            <param name="format">Trace message format.</param>
            <param name="args">Trace message arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Verbose(System.String)">
            <summary>
            Trace a verbose message.
            </summary>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseIf(System.Boolean,System.String)">
            <summary>
            Trace a verbose message based on condition.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseUnless(System.Boolean,System.String)">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="level">Trace message level.</param>
            <param name="message">Trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.Verbose(System.String,System.Object[])">
            <summary>
            Trace a verbose message.
            </summary>
            <param name="format">Format of trace message.</param>
            <param name="args">Arguments for trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Trace a verbose message based on a condition.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Message format.</param>
            <param name="args">Arguments for trace message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseUnless(System.Boolean,System.String,System.Object[])">
            <summary>
            Only prints the formatted message if the condition is false
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="format">Format for the trace message.</param>
            <param name="args">Trace message arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.VerboseUnlessAlterTrace(System.Boolean,System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Prints the message if the condition is false. If the condition is true,
            the message is instead printed at the specified trace level.
            </summary>
            <param name="condition">Condition for tracing.</param>
            <param name="level">Trace message level.</param>
            <param name="format">Format of the trace message.</param>
            <param name="args">Arguments for the trace message format.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.SetupRemoteListeners(System.Diagnostics.TraceListener)">
            <summary>
            Setup trace listeners. It should be called when setting trace listener for child domain.
            </summary>
            <param name="listener">New listener.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.EnsureTraceIsInitialized">
            <summary>
            Ensure the trace is initialized
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.FormatException(System.Exception)">
            <summary>
            Formats an exception into a nice looking message.
            </summary>
            <param name="exceptionToTrace">The exception to write.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.GetProcessName">
            <summary>
            Get the process name. Note: we cache it, use m_processName.
            </summary>
            <returns>Name of the process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.WriteLine(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Adds the message to the trace log.
            The line becomes:
                [I, PID, ThreadID, 2003/06/11 11:56:07.445] CallingAssemblyName: message.
            </summary>
            <param name="level">Trace level.</param>
            <param name="message">The message to add to trace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace.LogIgnoredException(System.Exception)">
            <summary>
            Auxiliary method: logs the exception that is being ignored.
            </summary>
            <param name="e">The exception to log.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener">
            <summary>
            Performs logging to a file and rolls the output file when either time or size thresholds are
            exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener"/> class.
            </summary>
            <param name="fileName">The filename where the entries will be logged.</param>
            <param name="name">Name of the trace listener.</param>
            <param name="rollSizeKB">The maximum file size (KB) before rolling.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TraceFileName">
            <summary>
            Gets name of the Trace file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.RollingHelper">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper"/> for the flat file.
            </summary>
            <value>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper"/> for the flat file.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.WriteLine(System.String)">
            <summary>
            Writes the trace messages to the file.
            </summary>
            <param name="message">Trace message string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.OpenTextWriter(System.String)">
            <summary>
            Opens specified file and returns text writer.
            </summary>
            <param name="fileName">The file to open.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter"/> instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper">
            <summary>
            Encapsulates the logic to perform rolls.
            </summary>
            <remarks>
            If no rolling behavior has been configured no further processing will be performed.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.synclock">
            <summary>
            Synchronisation lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.disposed">
            <summary>
            Whether the object is disposed or not.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.managedWriter">
            <summary>
            A tally keeping writer used when file size rolling is configured.<para/>
            The original stream writer from the base trace listener will be replaced with
            this listener.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.owner">
            <summary>
            The trace listener for which rolling is being managed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper"/> class.
            </summary>
            <param name="owner">
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener"/> to use.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.CheckIsRollNecessary">
            <summary>
            Checks whether rolling should be performed, and returns the date to use when performing the roll.
            </summary>
            <returns>The date roll to use if performing a roll, or <see langword="null"/> if no rolling should occur.</returns>
            <remarks>
            Defer request for the roll date until it is necessary to avoid overhead.<para/>
            Information used for rolling checks should be set by now.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.PerformRoll(System.DateTime)">
            <summary>
            Perform the roll for the next date.
            </summary>
            <param name="rollDateTime">The roll date.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.RollIfNecessary">
            <summary>
            Rolls the file if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.UpdateRollingInformationIfNecessary">
            <summary>
            Updates bookeeping information necessary for rolling, as required by the specified
            rolling configuration.
            </summary>
            <returns>true if update was successful, false if an error occurred.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.StreamWriterRollingHelper.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter">
            <summary>
            Represents a file stream writer that keeps a tally of the length of the file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter"/> class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.FileStream"/> to write to.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.#ctor(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter"/> class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.FileStream"/> to write to.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding"/> to use.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.Tally">
            <summary>
            Gets the tally of the length of the string.
            </summary>
            <value>
            The tally of the length of the string.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">
            The character to write to the text stream.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the<see cref="T:System.IO.StreamWriter"></see>is at the end the stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream.
            </summary>
            <param name="buffer">
            A character array containing the data to write. If buffer is null, nothing is written.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the<see cref="T:System.IO.StreamWriter"></see>is at the end the stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes an array of characters to the stream.
            </summary>
            <param name="buffer">
            A character array containing the data to write.
            </param>
            <param name="index">
            The index into buffer at which to begin writing.
            </param>
            <param name="count">
            The number of characters to read from buffer.
            </param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the<see cref="T:System.IO.StreamWriter"></see>is at the end the stream.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index or count is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            The buffer length minus index is less than count.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            buffer is null.
            </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener.TallyKeepingFileStreamWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">
            The string to write to the stream. If value is null, nothing is written.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="P:System.IO.StreamWriter.AutoFlush"></see>is true or the<see cref="T:System.IO.StreamWriter"></see>buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the<see cref="T:System.IO.StreamWriter"></see>is at the end the stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper">
            <summary>
            The file helper.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.CreateDirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.Exists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.DirectoryExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.GetStream(System.String,System.IO.FileMode)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper.GetFileAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper">
            <summary>
            The FileHelper interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">Path of the directory.</param>
            <returns><see cref="T:System.IO.DirectoryInfo"/> for the created directory.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.Exists(System.String)">
            <summary>
            Exists utility to check if file exists (case sensitive).
            </summary>
            <param name="path"> The path of file. </param>
            <returns>True if file exists <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.DirectoryExists(System.String)">
            <summary>
            Exists utility to check if directory exists (case sensitive).
            </summary>
            <param name="path"> The path of file. </param>
            <returns>True if directory exists <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.GetStream(System.String,System.IO.FileMode)">
            <summary>
            Gets a stream for the file.
            </summary>
            <param name="filePath">Path to the file.</param>
            <param name="mode"><see cref="T:System.IO.FileMode"/> for file operations.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that supports read/write on the file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Enumerates files which match a pattern (case insensitive) in a directory.
            </summary>
            <param name="directory">Parent directory to search.</param>
            <param name="pattern">Search pattern.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/> for directory.</param>
            <returns>List of files matching the pattern.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper.GetFileAttributes(System.String)">
            <summary>
            Gets attributes of a file.
            </summary>
            <param name="path">Full path of the file.</param>
            <returns>Attributes of the file.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleColorHelper">
            <summary>
            Colors the console output and restores it when disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleColorHelper.#ctor(System.ConsoleColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleColorHelper"/> class.
            </summary>
            <param name="foregroundColor">
            Color to set the console foreground to.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleColorHelper.Dispose">
            <summary>
            Restores the original foreground color.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleColorHelper.Dispose(System.Boolean)">
            <summary>
            Disposes the composition container.
            </summary>
            <param name="disposing">True if the object is disposing.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput">
            <summary>
            Sends output to the console.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Instance">
            <summary>
            Gets the instance of <see cref="T:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.WriteLine(System.String,Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel)">
            <summary>
            Writes the message with a new line.
            </summary>
            <param name="message">Message to be output.</param>
            <param name="level">Level of the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput.Write(System.String,Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel)">
            <summary>
            Writes the message with no new line.
            </summary>
            <param name="message">Message to be output.</param>
            <param name="level">Level of the message.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.IOutput">
            <summary>
            Interface to output information under the command line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.IOutput.WriteLine(System.String,Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel)">
            <summary>
            Writes the message with a new line.
            </summary>
            <param name="message">Message to be output.</param>
            <param name="level">Level of the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.IOutput.Write(System.String,Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel)">
            <summary>
            Writes the message with no new line.
            </summary>
            <param name="message">Message to be output.</param>
            <param name="level">Level of the message.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel">
            <summary>
            Defines the level of output.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel.Information">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities">
            <summary>
            Utility Methods for sending output to IOutput.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities.Error(Microsoft.VisualStudio.TestPlatform.Utilities.IOutput,System.String,System.Object[])">
            <summary>
            Output an error message.
            </summary>
            <param name="output">Output instance the method is being invoked with.</param>
            <param name="format">Format string for the error message.</param>
            <param name="args">Arguments to format into the format string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities.Warning(Microsoft.VisualStudio.TestPlatform.Utilities.IOutput,System.String,System.Object[])">
            <summary>
            Output a warning message.
            </summary>
            <param name="output">Output instance the method is being invoked with.</param>
            <param name="format">Format string for the warning message.</param>
            <param name="args">Arguments to format into the format string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities.Information(Microsoft.VisualStudio.TestPlatform.Utilities.IOutput,System.String,System.Object[])">
            <summary>
            Output a informational message.
            </summary>
            <param name="output">Output instance the method is being invoked with.</param>
            <param name="format">Format string for the informational message.</param>
            <param name="args">Arguments to format into the format string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities.Output(Microsoft.VisualStudio.TestPlatform.Utilities.IOutput,Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel,System.String,System.String,System.Object[])">
            <summary>
            Formats the message.
            </summary>
            <param name="output">An output instance to write the message.</param>
            <param name="level">Message level.</param>
            <param name="messageTypeFormat">Format string for the message type.</param>
            <param name="format">Format string for the error message.</param>
            <param name="args">Arguments to format into the format string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.OutputUtilities.Format(System.String,System.String,System.Object[])">
            <summary>
            Formats the message.
            </summary>
            <param name="messageTypeFormat">Format string for the message type.</param>
            <param name="format">Format string for the error message.</param>
            <param name="args">Arguments to format into the format string.</param>
            <returns>Formatted message.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1">
            <summary>
            Generic queue for processing jobs on a background thread.
            </summary>
            <typeparam name="T">The type of the job that is being processed.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.processJob">
            <summary>
            Handler which processes the individual jobs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.displayName">
            <summary>
            Name used when displaying information or reporting errors about this queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.jobsQueue">
            <summary>
            The queue of jobs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.jobAdded">
            <summary>
            Signaled when a job is added to the queue.  Used to wakeup the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.maxNumberOfJobsInQueue">
            <summary>
            The maximum number of jobs the job queue may hold.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.maxBytesQueueCanHold">
            <summary>
            The maximum total size of jobs the job queue may hold.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.currentNumberOfBytesQueueIsHolding">
            <summary>
            Gives the approximate total size of objects in the queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.enableBoundsOnQueue">
            <summary>
            Tells whether the queue should be bounded on size and no of events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.queueProcessing">
            <summary>
            Used to pause and resume processing of the queue.  By default the manual reset event is
            set so the queue can continue processing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.backgroundJobProcessor">
            <summary>
            The background thread which is processing the jobs.  Used when disposing to wait
            for the thread to complete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.isDisposed">
            <summary>
            Keeps track of if we are disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.exceptionLogger">
            <summary>
            Logs to this action any exception when processing jobs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.#ctor(System.Action{`0},System.String,System.Int32,System.Int32,System.Boolean,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1"/> class.
            </summary>
            <param name="processJob">Action to handle the processing of the job.</param>
            <param name="displayName">Name to used when displaying information about this queue.</param>
            <param name="maxQueueLength">The max Queue Length.</param>
            <param name="maxQueueSize">The max Queue Size.</param>
            <param name="enableBounds">The enable Bounds.</param>
            <param name="exceptionLogger">The exception Logger.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.QueueJob(`0,System.Int32)">
            <summary>
            Adds a job to the queue.
            </summary>
            <param name="job"> Job to add to the queue. </param>
            <param name="jobSize"> The job Size. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.Pause">
            <summary>
            Pause the processing of queued jobs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.Resume">
            <summary>
            Resume the processing of queued jobs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.Flush">
            <summary>
            Waits for all current jobs in the queue to be processed and then returns.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.Dispose">
            <summary>
            Waits for all pending jobs to complete and shutdown the background thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.WaitForQueueToGetEmpty">
            <summary>
            Block the queue call.
            A separate protected virtual method had to be made so that it can be over-ridden when writing unit test to check
            if bounds on the queue are applied correctly.
            </summary>
            <returns>True if the queue is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.InternalQueueJob(Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job{`0})">
            <summary>
            Queue the job and signal the background thread.
            </summary>
            <param name="job">Job to be queued.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.CheckDisposed">
            <summary>
            Throws wen the queue has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.BackgroundJobProcessor">
            <summary>
            Method which processes the jobs on the background thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1.SafeProcessJob(`0)">
            <summary>
            Executes the process job handler and logs any exceptions which occur.
            </summary>
            <param name="job">Job to be executed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Utilities.MulticastDelegateUtilities">
            <summary>
            Utility methods for MulticastDelegates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Utilities.MulticastDelegateUtilities.SafeInvoke(System.Delegate,System.Object,System.EventArgs,System.String)">
            <summary>
            Invokes each of the subscribers of the event and handles exceptions which are thrown
            ensuring that each handler is invoked even if one throws.
            </summary>
            <param name="delegates">Event handler to invoke.</param>
            <param name="sender">Sender to use when raising the event.</param>
            <param name="args">Arguments to provide.</param>
            <param name="traceDisplayName">Name to use when tracing out errors.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.CannotBeNullOrEmpty">
            <summary>
               Looks up a localized string similar to The parameter cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.CommandLineError">
            <summary>
               Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.CommandLineInformational">
            <summary>
               Looks up a localized string similar to Information: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.CommandLineWarning">
            <summary>
               Looks up a localized string similar to Warning: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentIsEmpty">
            <summary>
               Looks up a localized string similar to The specified argument cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentIsNegative">
            <summary>
               Looks up a localized string similar to The specified argument cannot be negative..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentNotTypeOf">
            <summary>
               Looks up a localized string similar to The specified argument must have the following type: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentPropertyIsEmpty">
            <summary>
               Looks up a localized string similar to The specified argument has the following property, which cannot be an empty string: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentPropertyIsNegative">
            <summary>
               Looks up a localized string similar to The specified argument has the following property, which cannot be negative: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentPropertyIsNull">
            <summary>
               Looks up a localized string similar to The specified argument has the following property, which cannot be null: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Error_ArgumentPropertyNotTypeOf">
            <summary>
               Looks up a localized string similar to The specified argument has the following property: {0}. This property must have the following type: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.ExceptionFromJobProcessor">
            <summary>
               Looks up a localized string similar to Unhandled exception occurred while processing a job from the &apos;{0}&apos; queue: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.QueueAlreadyDisposed">
            <summary>
               Looks up a localized string similar to The {0} queue has already been disposed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.QueuePausedDisposeError">
            <summary>
               Looks up a localized string similar to The {0} queue cannot be disposed while paused..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources.Utility_ProcessNameWhenCannotGetIt">
            <summary>
               Looks up a localized string similar to Error getting process name..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.Instance">
            <summary>
            Gets the instance of <see cref="T:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.VsTestConsoleStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.VsTestConsoleStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DiscoveryRequestStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DiscoveryRequestStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.ExecutionRequestStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.ExecutionRequestStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.TestHostStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.TestHostStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.TestHostAppDomainCreationStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.TestHostAppDomainCreationStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterSearchStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterSearchStop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterExecutionStart(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterExecutionStop(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterDiscoveryStart(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.AdapterDiscoveryStop(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DiscoveryStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DiscoveryStop(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.ExecutionStart">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.ExecutionStop(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DataCollectionStart(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource.DataCollectionStop">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents">
            <summary>
            TestPlatform Event Ids and tasks constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DiscoveryStartEventId">
            <summary>
            The discovery start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DiscoveryStopEventId">
            <summary>
            The discovery stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.ExecutionStartEventId">
            <summary>
            The execution start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.ExecutionStopEventId">
            <summary>
            The execution stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterExecutionStartEventId">
            <summary>
            The adapter execution start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterExecutionStopEventId">
            <summary>
            The adapter execution stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.VsTestConsoleStartEventId">
            <summary>
            The console runner start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.VsTestConsoleStopEventId">
            <summary>
            The console runner stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.TestHostStartEventId">
            <summary>
            The test host start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.TestHostStopEventId">
            <summary>
            The test host stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterSearchStartEventId">
            <summary>
            The adapter search start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterSearchStopEventId">
            <summary>
            The adapter search stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DiscoveryRequestStartEventId">
            <summary>
            The discovery request start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DiscoveryRequestStopEventId">
            <summary>
            The discovery request stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.ExecutionRequestStartEventId">
            <summary>
            The execution request start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.ExecutionRequestStopEventId">
            <summary>
            The execution request stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DataCollectionStartEventId">
            <summary>
            The data collection start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.DataCollectionStopEventId">
            <summary>
            The data collection stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterDiscoveryStartEventId">
            <summary>
            The adapter discovery start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.AdapterDiscoveryStopEventId">
            <summary>
            The adapter discovery stop event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.TestHostAppDomainCreationStartEventId">
            <summary>
            The test host appdomain start event id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents.TestHostAppDomainCreationStopEventId">
            <summary>
            The test host appdomain stop event id.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource">
            <summary>
            TestPlatform Instrumentation events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.VsTestConsoleStart">
            <summary>
            The vs test console start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.VsTestConsoleStop">
            <summary>
            The vs test console stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DiscoveryRequestStart">
            <summary>
            The discovery request start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DiscoveryRequestStop">
            <summary>
            The discovery request stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.ExecutionRequestStart">
            <summary>
            The execution request start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.ExecutionRequestStop">
            <summary>
            The execution request stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.TestHostStart">
            <summary>
            The test host start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.TestHostStop">
            <summary>
            The test host stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.TestHostAppDomainCreationStart">
            <summary>
            The test host AppDomain Start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.TestHostAppDomainCreationStop">
            <summary>
            The test host AppDomain Stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterSearchStart">
            <summary>
            The adapter search start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterSearchStop">
            <summary>
            The adapter search stop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterExecutionStart(System.String)">
            <summary>
            The adapter execution start.
            </summary>
            <param name="executorUri">
            The executor uri.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterExecutionStop(System.Int64)">
            <summary>
            The adapter execution stop.
            </summary>
            <param name="numberOfTests">
            The number of tests.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterDiscoveryStart(System.String)">
            <summary>
            The adapter discovery start.
            </summary>
            <param name="executorUri">
            The executor uri.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.AdapterDiscoveryStop(System.Int64)">
            <summary>
            The adapter discovery stop.
            </summary>
            <param name="numberOfTests">
            The number of tests.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DiscoveryStart">
            <summary>
            The discovery start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DiscoveryStop(System.Int64)">
            <summary>
            The discovery stop.
            </summary>
            <param name="numberOfTests">
            The number of tests.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.ExecutionStart">
            <summary>
            The execution start.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.ExecutionStop(System.Int64)">
            <summary>
            The execution stop.
            </summary>
            <param name="numberOfTests">
            The number of tests.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DataCollectionStart(System.String)">
            <summary>
            The data collection start.
            </summary>
            <param name="dataCollectorUri">
            The data collector uri.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource.DataCollectionStop">
            <summary>
            The data collection stop.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1">
            <summary>
            Wrapper class around a job used to send additional information to the background thread.
            </summary>
            <typeparam name="TPayload">The type of the job.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1"/> class.
            </summary>
            <param name="job">
            Job to be processed.
            </param>
            <param name="size">
            Size of payload.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1"/> class from being created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.ShutdownJob">
            <summary>
            Gets a special job that indicates the queue should shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.Payload">
            <summary>
            Gets the job to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.Shutdown">
            <summary>
            Gets a value indicating whether the background thread should shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.WaitManualResetEvent">
            <summary>
            Gets the signal that this job is being processed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.Size">
            <summary>
            Gets the size of this job instance. This is used to manage the total size of Job Queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1.CreateWaitJob(System.Threading.ManualResetEvent)">
            <summary>
            Creates a job with a manual reset event that will be set when the job is processed.
            </summary>
            <param name="waitEvent"> The wait Event. </param>
            <returns> The wait job. </returns>
        </member>
    </members>
</doc>
